<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shubhro Saha</title>
    <description>Personal web site of Shubhro Saha</description>
    <link>http://www.shubhro.com/</link>
    <atom:link href="http://www.shubhro.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Links I recommend</title>
        <description>&lt;p&gt;Here are some articles by other people that I recommend. I don’t necessarily agree with every view in the links below, but I think they’re worth reading.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://miter.mit.edu/the-unexotic-underclass/&quot;&gt;The Unexotic Underclass&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chadfowler.com/blog/2014/01/21/on-having-something-to-say/&quot;&gt;On Having Something to Say&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://yaledailynews.com/blog/2009/09/11/keegan-why-we-care-about-whales/&quot;&gt;Why we care about whales&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://algeri-wong.com/yishan/engineering-management.html&quot;&gt;Engineering Management&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bwater.com/Uploads/FileManager/Principles/Bridgewater-Associates-Ray-Dalio-Principles.pdf&quot;&gt;Principles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sites.google.com/site/steveyegge2/you-should-write-blogs&quot;&gt;You Should Write Blogs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.jpl-consulting.com/2012/04/why-i-wont-sign-your-nda/&quot;&gt;Why I Won’t Sign Your NDA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://yaledailynews.com/crosscampus/2012/05/27/keegan-the-opposite-of-loneliness/&quot;&gt;The Opposite of Loneliness&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gretchenrubin.com/happiness_project/2006/06/are_you_a_satis/&quot;&gt;Are you a satisficer or a maximizer?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.paulgraham.com/essay.html&quot;&gt;The Age of the Essay&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.paulgraham.com/writing44.html&quot;&gt;Writing, Briefly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://techcrunch.com/2015/03/08/on-secretly-terrible-engineers/&quot;&gt;On Secretly Terrible Engineers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.aaronkharris.com/someone-else-had-your-idea-first&quot;&gt;Someone else had your idea first&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 21 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://www.shubhro.com/2015/07/21/links-recommend/</link>
        <guid isPermaLink="true">http://www.shubhro.com/2015/07/21/links-recommend/</guid>
      </item>
    
      <item>
        <title>Guide to teaching an E-Club hack class</title>
        <description>&lt;p&gt;&lt;img src=&quot;/static/hack-class-guide/illustration.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#whether&quot;&gt;Whether to Teach&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what&quot;&gt;What to Teach&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#when&quot;&gt;When to Teach&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#where&quot;&gt;Where to Teach&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hype&quot;&gt;How to Hype&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#preparation&quot;&gt;Class Preparation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how&quot;&gt;How to Teach&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#closing&quot;&gt;Closing Thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;The Princeton E-Club hack class program invites students to teach technology and entrepreneurship courses to other students. Courses typically complement the university curriculum and include topics like iOS programming, web development, and user interface design. Class sizes vary anywhere from five to fifty students.&lt;/p&gt;

&lt;p&gt;I wrote this guide to encourage Princeton University students to teach hack classes and provide tips to help make them successful. Some of this material may be helpful for teaching classes in general. Credit for many of this guide’s ideas is owed to &lt;a href=&quot;http://www.crmarsh.com&quot;&gt;Charlie Marsh&lt;/a&gt; ‘15 and &lt;a href=&quot;http://www.dskang.com&quot;&gt;Dan Kang&lt;/a&gt; ‘15, with whom I taught &lt;a href=&quot;http://introtohacking.github.io/&quot;&gt;Introduction to Hacking&lt;/a&gt; and &lt;a href=&quot;http://introsideprojects.github.io&quot;&gt;Introduction to Side Projects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;whether&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;whether-to-teach&quot;&gt;Whether To Teach&lt;/h3&gt;
&lt;p&gt;The idea of teaching a hack class might make a student uncomfortable. Common reactions are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“I don’t feel qualified to teach a class on that subject.”&lt;/li&gt;
  &lt;li&gt;“I’m not sure people would be interested in that subject.”&lt;/li&gt;
  &lt;li&gt;“I don’t have the time.”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These concerns are OK– we felt them and many more ourselves! Before letting them discourage you from teaching a class, however, consider the following advice.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Qualifications/Experience&lt;/em&gt;. The fields of technology and entrepreneurship break traditional thinking. It doesn’t matter how many “years of experience” you have, but rather “what you know” and “how quickly you learn”.&lt;/p&gt;

&lt;p&gt;Consider applying that attitude towards hack classes. Computer science is such a complex and dynamic field that nobody can know everything. Everyone is constantly learning. Instructors teach what they learned through internships, picked up in side projects, or read on the Internet. As a student you probably know &lt;em&gt;something&lt;/em&gt; that another student doesn’t. The difference between what you knew as a freshman and what you know today is full of material that would be worth teaching in a hack class.&lt;/p&gt;

&lt;p&gt;Chad Fowler has a great &lt;a href=&quot;http://chadfowler.com/blog/2014/01/21/on-having-something-to-say/&quot;&gt;article&lt;/a&gt; addressing the feeling of having nothing interesting to say. Check it out.&lt;/p&gt;

&lt;p&gt;You might worry about whether you’ll be a good “teacher”. It’s OK that you’ve never taught anything before. The very purpose of this guide is to make you an effective teacher.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Interesting Subject&lt;/em&gt;. Perhaps you have a subject in mind that you want to teach, but are unsure whether other people would be interested in it. This uncertainty is natural.&lt;/p&gt;

&lt;p&gt;I suggest you don’t define your success by the number of people who attend your class. Many of the factors controlling attendance are out of your control. If you find a subject interesting, chances are that at least a few other people at Princeton will also find it interesting. Making an impact on those people– however few there are– can be sufficient motivation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Making Time&lt;/em&gt;. There’s no dodging the truth on this one: teaching a hack class takes time–probably more time than you would expect. Not only will you need 1-2 hours for teaching each week, but also a few hours to assemble content, prepare slides, and send emails. It’s certainly a meaningful commitment.&lt;/p&gt;

&lt;p&gt;That said, there’s a difference between “knowing you don’t have the time” and “being unsure whether you have the time”. If you think the latter describes you better, consider the following breakdown of time commitment that we put into our hack classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content Preparation&lt;/strong&gt;: 3-8 hours/week. This process requires several hours of brainstorming and collecting feedback from other instructors and potential students. In Introduction to Hacking, we assembled content from tutorials online and composed our own examples, so the total time fell in the lower end of this range. In Introduction to Side Projects, we had to develop our own content for a subject that had never been taught before. That content took much more time to write! Your needs will vary based on how much you follow existing tutorials and whether you develop original content.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Slides Preparation&lt;/strong&gt;: 1-2 hours/week. This requirement will vary based on how you design your slides, of course. We found slides straightforward to write when the content was already prepared really well in the last step.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Communication and Hype&lt;/strong&gt;: 1-2 hours/week. Concise, persuasive emails take time to craft. You’ll also have to talk to people in person, respond to questions, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Other&lt;/strong&gt;: Certain aspects of the class have to be prepared just once, but require effort. For example, room reservations will take an hour, and designing the course web site will also require a few more hours.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While this breakdown doesn’t prescribe a single figure for the time required, I hope it makes it easier for you to make your own projections. Teaching a hack class takes time, but you might have the time available if you sit down to lay it out.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;what&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-to-teach&quot;&gt;What to Teach&lt;/h3&gt;
&lt;p&gt;Teach a subject that excites you. I also suggest teaching a subject that you &lt;strong&gt;haven’t&lt;/strong&gt; mastered. Introduction to Side Projects was fun because teaching other people helped us to crystallize our own understanding and make new realizations.&lt;/p&gt;

&lt;p&gt;It’s common to teach a new subject. Introduction to Hacking and Introduction to Side Projects were both new the years they were introduced. You can also take on a subject that has been taught before. Here’s an uncomprehensive list of hack class subjects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web development: create web apps with Node and HTML/CSS/Javascript&lt;/li&gt;
  &lt;li&gt;Web design: build front end and user interface in HTML/CSS/Javascript&lt;/li&gt;
  &lt;li&gt;iOS development: create mobile apps for iOS&lt;/li&gt;
  &lt;li&gt;Hacking: solve practical, real-world problems with programming&lt;/li&gt;
  &lt;li&gt;Side Projects: discover tips and tricks for the non-engineering elements of a side project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We found it helpful to teach subjects that had modular units, which meant that each week’s topic didn’t depend on any previous week’s topic. If students missed classes, they could still hop into future sessions and understand everything. This is important because hack classes are attended “at will”. You need to make it frictionless for students to attend class.&lt;/p&gt;

&lt;p&gt;Teaching is more fun with friends. With 1-2 other instructors, you’ll learn more and be able to split up some of the work.&lt;/p&gt;

&lt;p&gt;After you’ve nailed the subject, define your “target audience”. What prior experience do they need and why should they take your class? Why would these students want to take this class? Clear answers to these questions are crucial. Your answers to these questions will dictate how you choose the material, promote the class, and define success.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;when&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;when-to-teach&quot;&gt;When to Teach&lt;/h3&gt;
&lt;p&gt;Hack classes usually run both in the Fall and Spring. It doesn’t matter which semester you pick. However, it’s important that you work around certain considerations to maximize class attendance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t start your class during the first week of classes. Everyone’s so busy getting their academic courses straight that hack classes will not cross their mind.&lt;/li&gt;
  &lt;li&gt;Be cautious of seniors working on theses towards the end of Spring semester. Many won’t attend your class, especially if you meet the day before final reports are due.&lt;/li&gt;
  &lt;li&gt;5-7 lectures is a good length.&lt;/li&gt;
  &lt;li&gt;Midterms week is a bad time to hold a hack class.&lt;/li&gt;
  &lt;li&gt;Consider precepts in the evening that might create conflicts for students.&lt;/li&gt;
  &lt;li&gt;Earlier in the week is better because people are not exhausted from the week’s grind.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We found the second half of the Spring semester, on Mondays at 8:30 PM, to be a convenient time. Senior attendance suffered for a few weeks because of the concerns described above, but we deemed the tradeoff worthwhile.&lt;/p&gt;

&lt;p&gt;Moving beyond the calendar dates to address another “when” question: you should teach whenever you feel like you have something you’re excited about, regardless of your age or class year. Younger students teach older students new material all the time. Seniority does not matter, ever.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;where&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;where-to-teach&quot;&gt;Where to Teach&lt;/h3&gt;
&lt;p&gt;E-Club hack classes are usually adminstered in lecture/seminar formats, but that is by no means a requirement. In recent years we experimented with an online component so people outside of Princeton could follow along.&lt;/p&gt;

&lt;p&gt;You should think hard about the class format and choose what’s best for the subject you’re teaching. iOS development was taught seminar-style to give each student more attention. On the other hand, Introduction to Side Projects was taught in lecture style because it didn’t require as much handholding through the material.&lt;/p&gt;

&lt;p&gt;The class format you pick will decide where you teach the class. With class size and room/building preferences in mind, submit a request with &lt;a href=&quot;http://www.princeton.edu/uscheduling/schedwho.html&quot;&gt;University Scheduling&lt;/a&gt; a month before your class begins. Don’t hesitate to contact the &lt;a href=&quot;http://www.princeton.edu/uscheduling/schedwho.html&quot;&gt;staff&lt;/a&gt; directly if you don’t hear back in a reasonable amount of time. They are exceedingly helpful and understanding so please be considerate of their time. Rooms in Frist, McCosh, and Robertson work well because they are centrally located. &lt;/p&gt;

&lt;p&gt;If you want to post course content online, think about what would be the best format for conveying the material; lecture videos may not be the most effective format. In Introduction to Side Projects, we found detailed, annotated slides to be a more flexible option. Create a GitHub organization and repositories if you have example code to share.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;hype&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-to-hype&quot;&gt;How to Hype&lt;/h3&gt;
&lt;p&gt;Write a course announcement. This is a single-page summary containing a course description, logistical information, and some background on the instructors. Not only will authoring this document crystallize your vision, but also the document itself is a convenient way to share that vision with other people and organizations. Obsess over concision and interesting content in the course description. It is the hook that should inspire a student to enroll and will be used again in other communications. Check out the &lt;a href=&quot;http://docs.google.com/document/d/1C8KF9a2oCF_YGPCSj4WQkEIGU20VpS_sK5nPwG6OS-0/edit?usp=sharing&quot;&gt;Introduction to Side Projects Course Announcement&lt;/a&gt; for an example course announcement.&lt;/p&gt;

&lt;p&gt;Create a course web site. This will be the face of your course before it begins and an information resource during the course. Grab the visitor’s attention. Collect enrollments with email address fields on the homepage. Place the course description and syllabus prominently on the homepage. Say something about the instructors’ backgrounds. Consider using &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; for hosting and &lt;a href=&quot;http://mailchimp.com/&quot;&gt;MailChimp&lt;/a&gt; for enrollment. Check out the websites of &lt;a href=&quot;http://introtohacking.github.io/&quot;&gt;Introduction to Hacking&lt;/a&gt; and &lt;a href=&quot;http://introsideprojects.github.io/&quot;&gt;Introduction to Side Projects&lt;/a&gt; for examples.&lt;/p&gt;

&lt;p&gt;Obsess over the enrollment. Start telling friends about your class as soon as you decide to teach one. It takes time to generate interest. I found it helpful to enroll friends myself if they expressed interest. In our hack classes we had about 200 people on the mailing list before the courses even started; this resulted in about 40 students attending each class. Enrolling well beyond your target attendance is crucial to guaranteeing attendance.&lt;/p&gt;

&lt;p&gt;Deliver a brief pitch in COS/EGR classes. Professors are generally extremely supportive of the hack class program. If you kindly email them and ask for 30 seconds to pitch your class before an upcoming lecture, they’ll often be willing to help out. Professors are understandably pressed for time delivering their own material, however, so it’s OK if they decline. You can suggest sharing a Piazza post as a backup plan. COS 126 and COS 333 have good audiences to pitch.&lt;/p&gt;

&lt;p&gt;Hammer the listservs. Be simple and concise. Pull back on exclamation points, formatting, and colors. Just say things like they are. Write a great subject. Focus on the &lt;em&gt;why&lt;/em&gt;: why should they enroll? Attend? Care to read this email anyway? It’s important to be shameless in the frequency with which you email listservs. Any single email has a low open rate, but over multiple emails, the message is broadcasted to a wider audience. A neat trick is to continue emailing listservs even after the course begins. Specific topics often pique students’ interest more than the entire course subject. For example, we advertised a “Computer and Network Security” lecture on listservs towards the end of Introduction to Hacking. Attendance for that lecture nearly doubled in size; most of the newcomers said they came because of the recent listserv email.&lt;/p&gt;

&lt;p&gt;Email through other people. Princeton administrative staff often broadcast emails on behalf of student organizations. You can ask the CS department coordinator and dean of engineering to send your course description to the CS undergrads/grads and engineering students, respectively. ACM and E-Club also have weekly emails where your course should be featured; contact the presidents of those organizations to make that happen.&lt;/p&gt;

&lt;p&gt;Talk about your class. This point is obvious to realize, yet difficult to implement. You are the biggest ambassador for your course, so you should talk about it a &lt;em&gt;lot&lt;/em&gt; with all sorts of people. When people ask you “What’s up?”, you say, “Hack class.” You’ll be surprised to see the number of people who take interest simply because they know you and support you.&lt;/p&gt;

&lt;p&gt;Post in Facebook groups. Many groups have members that would be interested in your course. Search for Princeton groups themed around entrepreneurship, computer science, ACM, etc.&lt;/p&gt;

&lt;p&gt;Do posters only if they’re insanely great. Otherwise, don’t bother. The work/benefit payoff of posters for hack classes is questionable. Digital communications yield better results.&lt;/p&gt;

&lt;p&gt;Finally, consider emailing participants of previous hack classes. Their instructors may be willing to share the mailing list or email their students on your behalf. Once students take one hack class, they’ll probably be excited to enroll in another.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;preparation&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;class-preparation&quot;&gt;Class Preparation&lt;/h3&gt;
&lt;p&gt;Preparing well for each class is critically important and requires several hours. Be sure to allocate time for content preparation, slide preparation, rehearsal, and communications.&lt;/p&gt;

&lt;p&gt;Start preparing the content for each class a week in advance. In the content preparation stage, you’ll want to collect all of the “wisdom” that you want to communicate. Depending on the topic, you may have to brainstorm this content yourself or distill key points from articles and tutorials online. Create an organized outline that contains all of the content you want to teach.&lt;/p&gt;

&lt;p&gt;When preparing slides and example code, follow the content outline closely. Let the outline guide you. If you created your outline thoughtfully, composing the slides will be relatively straightforward.&lt;/p&gt;

&lt;p&gt;Decide whether you want to display code snippets or type them out during the class for people to follow along. If the latter, you might find it helpful to print the code in advance so you can refer to it when coding live.&lt;/p&gt;

&lt;p&gt;Collect feedback if you want it. Ask people what’s surprising, what’s confusing, what’s too simple. We sometimes had disagreements among the instructors that were hard to resolve. To accomodate this, we rotated the responsibility of leading lectures. Then each week’s lead instructor would be responsible for making the final call in the decisions. The instructor leading each class is a natural choice; he/she should feel ownership over the content and presentation of his/her class.&lt;/p&gt;

&lt;p&gt;Rehearse. You should run through the class’s material at least once to make sure you have more content than you need. During the actual class, you’ll have to be flexible to make time for the most important points. Everything else can be posted online later or shared in a followup email.
Rehearse in front of a friend if that helps. Speak more slowly than you think is normal. Pause for silence frequently. Allocate time for students to ask questions along the way.&lt;/p&gt;

&lt;p&gt;Decide whether, and if so, how you want to share content online. Recording lecture videos is a straightforward choice if you’re comfortable with it. Consider whether videos are effective for the material you’re teaching, though. As a student, I find it difficult to learn from videos; I prefer to read material at my own pace. Posting detailed outlines alongside the lecture slides is an alternative option. If the latter, decide whether you want to share the slides before class takes place. Sharing content in advance will help students decide whether each class will be worth their while. &lt;/p&gt;

&lt;p&gt;Communicate often and concisely. Send email reminders for each class 1-2 days before and the afternoon before the class meets. Keep emails short and follow the advice mentioned earlier for “hyping” the course. The same remarks apply for each class. Send out Google Forms to collect feedback on previous lectures and input on what students want to learn during upcoming lectures. (People will respond!)&lt;/p&gt;

&lt;p&gt;It goes without saying that you should use collaboration/productivity tools like Google Drive, Dropbox, and GitHub, as appropriate. We found it helpful to keep instructors in sync with the &lt;a href=&quot;www.shubhro.com/2013/09/01/organize-projects/&quot;&gt;Project Planning Dashboard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do an equipment check the afternoon before your first class. Make sure the microphone and projector work. Find a dongle if you need one! Arrive half an hour before each class to set up your equipment and welcome students into the classroom. Set up signs if the room is hard to find. Play music to get students excited as they settle in.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;how&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-to-teach&quot;&gt;How to Teach&lt;/h3&gt;
&lt;p&gt;Practice empathy. Take a moment to understand the students’ perspective: what they know, what they want to know, why they’re taking your class. Talk to students to learn these things if they’re not obvious.&lt;/p&gt;

&lt;p&gt;Speak clearly, slowly, concisely. Let important points sink in. Pause frequently to let students ask questions. Ask “What questions do you have?” instead of “Do you have questions?” to make students more comfortable.&lt;/p&gt;

&lt;p&gt;Every session will likely have new students. Welcome them to the class and mention any logistical/introductory material that would be important for them to know. Briefly summarize what happened during the previous week. Doing so makes it easier for students to keep up while attending the sessions they care about most.&lt;/p&gt;

&lt;p&gt;Start on time. Pay close attention to the clock when teaching. End no more than ten minutes late.&lt;/p&gt;

&lt;p&gt;Conclude with “next steps” that students can take if they want to do more with the material. Consider presenting this in three different tracks for novice, intermediate, and advanced students, if appropriate. Put in a plug for the following week’s class topic and remind students they can write in feedback by email or a form on the web site. &lt;/p&gt;

&lt;p&gt;Students will naturally stick around to ask questions one-on-one after class. Leave time to entertain those questions and do your best to answer them. &lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;closing&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h3&gt;
&lt;p&gt;Teaching an E-Club hack class is simultaneously fascinating, challenging, and rewarding. You’ll make an incredible impact in the lives of other students and develop yourself as a student, teacher, programmer, and/or entrepreneur.&lt;/p&gt;

&lt;p&gt;Take all of this advice with a grain of salt, as circumstances change over time. I’m sure this guide will show its age at some point, and at that time, we hope you write a guide of your own. &lt;/p&gt;

&lt;p&gt;I strongly encourage you to consider teaching an E-Club hack class. The experience is worth it.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;http://www.crmarsh.com&quot;&gt;Charlie Marsh&lt;/a&gt; and &lt;a href=&quot;http://www.dskang.com&quot;&gt;Dan Kang&lt;/a&gt; for reviewing an earlier draft of this post.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://www.shubhro.com/2015/06/22/hack-class-guide/</link>
        <guid isPermaLink="true">http://www.shubhro.com/2015/06/22/hack-class-guide/</guid>
      </item>
    
      <item>
        <title>Bringing back the dictaphone</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;
    &lt;div class=&quot;image-figure&quot;&gt;
        &lt;img src=&quot;/static/bringing-back-dictaphone/don.jpg&quot; /&gt;&lt;br /&gt;
    &lt;center&gt;&lt;div&gt;Don Draper speaks into a dictaphone in Mad Men Season 5, Episode 8&lt;/div&gt;&lt;/center&gt;
    &lt;br /&gt;&lt;br /&gt;
    &lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;One of the fascinating things about &lt;em&gt;Mad Men&lt;/em&gt; is the frequent use of the dictaphone– a tape recorder that starts and stops recording with the click of a button.&lt;/p&gt;

&lt;p&gt;In the show, ad agency creatives use the dictaphone to brainstorm ideas aloud or dictate documents for later typing. It’s a simple device. Today, though, portable audio recorders and mobile devices render Don Draper’s machine extinct.&lt;/p&gt;

&lt;p&gt;I wonder if the dictaphone’s demise also brought down one of its most compelling use cases: brainstorming aloud. While digital audio recording is ubiquitous today, I don’t think many people speak their thoughts aloud before committing them to paper.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Mad Men&lt;/em&gt;, brainstorming aloud seems to be a key part of the creative process. In the scene above from Season 5, Draper spends a late night thinking of a campaign for Snoball, a frozen treat from the 1960s.&lt;/p&gt;

&lt;p&gt;“The frozen machine that makes money for vendors. Now if it’s for the customers, the kids… do they get to work the machine?” For a few minutes, the audience watches a frustrated Don Draper struggle with the creative process.&lt;/p&gt;

&lt;p&gt;As a writer, I sympathize with Draper’s frustration. Oftentimes, it’s difficult to turn the abstract thoughts in our heads into concrete words on the page. My writing process usually involves a first draft that spills all the thoughts in my head in whatever order I think of them. Only after several rewrites and revisions do I end up with the final draft.&lt;/p&gt;

&lt;p&gt;The problem with my writing process, though, is that I generate thoughts faster than I can type them. By the time I’m ready to put down the next thought, I’ve already forgotten it.&lt;/p&gt;

&lt;p&gt;Dictating, on the other hand, is a naturally fast way of committing our thoughts to the record. By speaking our thoughts aloud, we can record ideas as soon as we get them and organize them in writing later.&lt;/p&gt;

&lt;p&gt;The dictaphone encourages this process of brainstorming aloud. Speaking into a dictaphone can be a substitute for a first draft. Subsequent rewriting will then commit the recorded ideas to paper.&lt;/p&gt;

&lt;p&gt;If this process sounds interesting to you, check out &lt;a href=&quot;https://github.com/shbhrsaha/dictaphone&quot;&gt;Dictaphone&lt;/a&gt;, a Python script that imitates the behavior of the original dictaphone. It’s like other sound recorders, but the stop-go functionality helps to eliminate silence and make recording dead simple.&lt;/p&gt;

&lt;p&gt;At a larger level, it’s interesting how the demise of a technological device can change our behavior. I rarely hear about people using their mobile devices to orally record their thoughts. But when dictaphones were popular, it seems the practice was commonplace. This trend coincides with typing becoming mainstream. Today it’s hard to think of an era when typing was a special skill. Sometimes, though, taking a step back in time can make our lives today a little easier.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/shbhrsaha/dictaphone&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Feb 2015 00:00:00 -0500</pubDate>
        <link>http://www.shubhro.com/2015/02/06/bringing-back-dictaphone/</link>
        <guid isPermaLink="true">http://www.shubhro.com/2015/02/06/bringing-back-dictaphone/</guid>
      </item>
    
      <item>
        <title>E-Ink word processing with Amazon Kindle</title>
        <description>&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/writing-amazon-kindle/photo.jpg&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I love the Amazon Kindle’s E-Ink screen.&lt;/p&gt;

&lt;p&gt;It’s gentle on the eyes, reads easily in sunlight, and creates a distraction-free environment for reading. I wondered, then: how can I use the E-Ink screen for &lt;em&gt;writing&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;The challenge is that the Kindle doesn’t have any ports for external keyboards. In addition, the device’s operating system is limited and doesn’t offer much opportunity for developers to build applications.&lt;/p&gt;

&lt;p&gt;There are some solutions that bring word processing to E-Ink screens. &lt;a href=&quot;http://blog.the-ebook-reader.com/2015/01/15/paperlike-13-3-e-ink-monitor-by-dasung-tech-videos/&quot;&gt;Stand-alone E-Ink monitors&lt;/a&gt; are now available, but expensive. Alternatively, Max Ogden has a &lt;a href=&quot;http://maxogden.com/kindleberry-wireless.html&quot;&gt;great tutorial&lt;/a&gt; on how to jailbreak the Kindle to SSH into the Raspberry Pi. His hack provides a portable setup for focused coding and writing.&lt;/p&gt;

&lt;p&gt;Jailbreaking felt tedious, though, because of sparse and outdated documentation. I wondered if I could instead use the JavaScript-enabled Kindle web browser to display what’s typed on another machine in real-time (a la &lt;a href=&quot;http://collabedit.com/&quot;&gt;Collabedit&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The result was &lt;a href=&quot;https://github.com/shbhrsaha/typewriter&quot;&gt;&lt;em&gt;Typewriter&lt;/em&gt;&lt;/a&gt;, a Meteor app that brings distraction-free writing to the Kindle. After firing it up, I point the Kindle’s web browser to the Meteor app’s IP address and port. Because Meteor synchronizes data across clients, what I type into the computer’s browser instantly appears on the Kindle. It actually feels a little magical. The screen is surprisingly responsive to keystrokes, considering network and E-Ink refresh latencies.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;video width=&quot;500&quot; autoplay=&quot;autoplay&quot; loop=&quot;&quot; muted=&quot;&quot;&gt;
  &lt;source src=&quot;/static/writing-amazon-kindle/clip.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  Your browser does not support the video tag.
&lt;/video&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Typewriter periodically saves drafts in a backup folder in case I accidentally delete my work. I couldn’t figure out a clever way to display the cursor position, but Typewriter generally works well for writing first drafts. In the future it would be nice to run Typewriter on a Raspberry Pi so I won’t have to keep a Macbook running on the side.&lt;/p&gt;

&lt;p&gt;At a broader level, this hack illustrates the power of Kindle’s JavaScript engine. The browser can be a foundation for presenting applications in E-Ink, stretching the boundaries of what’s possible in an otherwise locked-down operating system.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/shbhrsaha/typewriter&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;http://www.crmarsh.com/&quot;&gt;Charlie Marsh&lt;/a&gt; for reviewing an earlier draft of this post.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Jan 2015 00:00:00 -0500</pubDate>
        <link>http://www.shubhro.com/2015/01/30/writing-amazon-kindle/</link>
        <guid isPermaLink="true">http://www.shubhro.com/2015/01/30/writing-amazon-kindle/</guid>
      </item>
    
      <item>
        <title>Why I use &#39;I&#39;m Feeling Lucky&#39; for every search</title>
        <description>&lt;p&gt;&lt;img src=&quot;/static/im-feeling-lucky/screenshot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A week ago, I tried a fun experiment.&lt;/p&gt;

&lt;p&gt;I configured my Chrome browser to send search queries to Google’s ‘I’m Feeling Lucky’. The feature skips the search results page and automatically navigates to the first result.&lt;/p&gt;

&lt;p&gt;To my surprise, I love it. Searching ‘Princeton map’ takes me to the &lt;a href=&quot;http://m.princeton.edu/map/campus&quot;&gt;official map&lt;/a&gt;, ‘python import syntax’ to the &lt;a href=&quot;https://docs.python.org/2/tutorial/modules.html&quot;&gt;modules docs&lt;/a&gt;, and ‘bent spoon hours’ to the &lt;a href=&quot;http://www.thebentspoon.net/BENTSPOON/hours.html&quot;&gt;hours page&lt;/a&gt; of my favorite ice cream shop. When the algorithm is not confident about the first result, it gracefully sends me to the usual search results page.&lt;/p&gt;

&lt;p&gt;Occassionally I use the ‘g’ keyword in my search bar to do a normal Google search. The results page is useful for doing research on a topic, for example. With most searches, though, I’m pretty happy with the first result.&lt;/p&gt;

&lt;p&gt;It’s &lt;a href=&quot;http://www.urbandictionary.com/define.php?term=anecdata&quot;&gt;anecdata&lt;/a&gt;, but I think the productivity improvement is noticeable. ‘I’m Feeling Lucky’ has long existed as a fun feature. Now, Google’s ranking algorithm might be smart enough for us to take it seriously. Web searches should be about &lt;em&gt;answers&lt;/em&gt;, not &lt;em&gt;search results&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes it screws up: ‘obama birthday’ takes me to &lt;a href=&quot;http://www.washingtontimes.com/news/2014/aug/7/russians-mock-obama-with-racist-birthday-message-p/&quot;&gt;The Washington Times&lt;/a&gt;. To easily return to search results, I created a Chrome extension called &lt;a href=&quot;https://github.com/shbhrsaha/lucky-strike&quot;&gt;Lucky Strike&lt;/a&gt;. The extension installs a button to pull up the search results page for your most recent query. You can install it for yourself on the &lt;a href=&quot;https://chrome.google.com/webstore/detail/lucky-strike/heijciabceepcblmjfndmmkmacnfniom?hl=en&quot;&gt;Chrome Web Store&lt;/a&gt;. If you don’t mind retyping queries, you can add ‘I’m Feeling Lucky’ to your search bar the &lt;a href=&quot;https://coderwall.com/p/062lng/make-i-m-feeling-lucky-your-default-chrome-search&quot;&gt;plain vanilla way&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;‘I’m Feeling Lucky’ doesn’t always work. But when it does, it’s insanely good.&lt;/p&gt;

&lt;p&gt;Give it a shot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/shbhrsaha/lucky-strike&quot;&gt;GitHub&lt;/a&gt;
⋅
&lt;a href=&quot;https://chrome.google.com/webstore/detail/lucky-strike/heijciabceepcblmjfndmmkmacnfniom?hl=en&quot;&gt;Chrome Web Store&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Jan 2015 00:00:00 -0500</pubDate>
        <link>http://www.shubhro.com/2015/01/20/im-feeling-lucky/</link>
        <guid isPermaLink="true">http://www.shubhro.com/2015/01/20/im-feeling-lucky/</guid>
      </item>
    
      <item>
        <title>What motivates me</title>
        <description>&lt;p&gt;&lt;img src=&quot;/static/what-motivates-me/illustration.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“What motivates you?”&lt;/p&gt;

&lt;p&gt;My friend Hannah asked me this question recently. I frequently refer to “impact” as my motivation, but I hadn’t thought more deeply about it until she asked for an explanation.&lt;/p&gt;

&lt;p&gt;So here’s a longer answer: &lt;em&gt;I’m motivated by technology that makes a meaningful impact in people’s lives.&lt;/em&gt; Let me explain some of these terms in more detail.&lt;/p&gt;

&lt;p&gt;While my work has mostly been in software engineering, I get excited by all kinds of “technology”. Software, hardware, web, or mobile. Dishwashers, lawnmowers, trucks, or airplanes. It’s all technology to me.&lt;/p&gt;

&lt;p&gt;“Impact” is a change in the way people see or do things. It makes a difference by changing the course of a person’s life in some way. It makes a person more productive or transforms what they thought was possible.&lt;/p&gt;

&lt;p&gt;Impact has breadth and depth. Breadth represents the &lt;em&gt;number&lt;/em&gt; of people impacted, while depth captures &lt;em&gt;to what extent&lt;/em&gt;. I’m motivated by a wide region in that “breadth x depth” coordinate space– affecting one hundred people 1% is up there with affecting one person 100%. If some technology affects one hundred people 100%, then that’s even more exciting.&lt;/p&gt;

&lt;p&gt;Impact is often measurable. For software, it might be the volume of sales, number of GitHub stars, or quality of user testimonials. For one’s writing, it might be the number of readers or reactions expressed in readers’ comments. While these indicators reflect impact, they don’t necessarily define it. In many instances, people feel impact but don’t express it in a visible way.&lt;/p&gt;

&lt;p&gt;“Meaningful” is harder to define. Yes, something meaningful is “positive”, “does good”, and concerns issues that people “care about”. But beyond that, I’ll defer to Hannah, who says: “It’s like a unicorn”. (I too was puzzled, at first.) Even if you’ve never seen it before, you would know it’s a unicorn. You’re absolutely sure it’s not a rhino– you can &lt;em&gt;feel&lt;/em&gt; it.&lt;/p&gt;

&lt;p&gt;Meaningful is distinct from depth of impact. The latter can be made in a positive or negative way. It can also be made in an area that people don’t care about. On the other hand, qualifying impact with “meaningful” captures things that are positive and people care about.&lt;/p&gt;

&lt;p&gt;I mentioned “people’s lives” and want to emphasize that point. To me, technology is always about people because they’re the ultimate beneficiary of whatever we develop.&lt;/p&gt;

&lt;p&gt;It’s helpful to think about sources of motivation because they often define what makes us happy. Only by being aware of our underlying goals can we be satisfied with what we do. At the moment, this explanation approximates the motivation for most of my work. Through my future jobs, responsibilities, and side projects, I think this will last for some time.&lt;/p&gt;

&lt;p&gt;Now if only I can find the motivation to finish my homework, I’ll feel just a little better.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;http://www.crmarsh.com&quot;&gt;Charlie Marsh&lt;/a&gt; for reading an earlier draft of this post and Hannah Park for asking the “motivating question”.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Jan 2015 00:00:00 -0500</pubDate>
        <link>http://www.shubhro.com/2015/01/05/what-motivates-me/</link>
        <guid isPermaLink="true">http://www.shubhro.com/2015/01/05/what-motivates-me/</guid>
      </item>
    
      <item>
        <title>Software engineers should write</title>
        <description>&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/software-engineers-should-write/illustration.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In elementary school, there were “math kids” and there were “English kids”. You were classified by the other kids’ impression of your prowess in each subject.&lt;/p&gt;

&lt;p&gt;I was a math kid. So I majored in computer science and set off to be a software engineer. Along the way, though, the “math kid”/”English kid” designation never really wore off. If anything, it got stronger. The engineers I meet today cringe at the thought of writing an essay. And the writers I meet cringe at the thought of writing code.&lt;/p&gt;

&lt;p&gt;What a shame! An engineer who writes code should also write essays.&lt;/p&gt;

&lt;p&gt;Software engineers should write because it promotes many of the same skills required in programming. A core skill in both disciplines is an ability to &lt;em&gt;think clearly&lt;/em&gt;. The best software engineers are great writers because their prose is as logical and elegant as their code.&lt;/p&gt;

&lt;p&gt;Code and essays have a lot more in common. Both begin as a blank slate and an idea, then end as a discrete product for an intended audience. The product is a sequence of logical statements, bundled into modular units– whether it be functions or paragraphs. Like good prose, good code is &lt;a href=&quot;http://www.folklore.org/StoryView.py?story=Negative_2000_Lines_Of_Code.txt&quot;&gt;concise&lt;/a&gt; (think “&lt;a href=&quot;https://robinwinslow.co.uk/2013/11/22/expressive-coding/&quot;&gt;expressive&lt;/a&gt;”). Bad code wastes CPU cycles; bad essays waste brain cycles.&lt;/p&gt;

&lt;p&gt;When closing in on a finished product, the engineer feels the same uneasiness as the weary writer. As with essays, software never quite feels “done”. It nudges for more of the engineer’s time: another feature to be built, another module that needs refactoring. He/she’s afraid it won’t be the best representation of his/her work. Oh well. Ship it.&lt;/p&gt;

&lt;p&gt;Software engineers should write because our craft is increasingly collaborative. Open source projects invite worldwide participation, while industry products often require an army of engineers. (Google Maps has &lt;a href=&quot;http://www.businessinsider.com/to-do-what-google-does-in-maps-apple-would-have-to-hire-7000-people-2012-6&quot;&gt;1100 full-time employees&lt;/a&gt;!) Good writing– whether it be in a GitHub comment, code review, or technical documentation– facilitates clear, concise communication for projects like these to move forward.&lt;/p&gt;

&lt;p&gt;Even if a project doesn’t require communication, writing about software in general promotes learning and important discussions. We don’t have to learn from RFC specs and technical manuals, thanks to tutorials written by other engineers. In technical discussions, only so much opinion can be stuffed into a Hacker News comment or a tweet. The rest begs to be channeled into a blog post.&lt;/p&gt;

&lt;p&gt;On the topic of blog posts, put some time into them. Good writing &lt;a href=&quot;http://goinswriter.com/the-difference-between-good-writers-and-bad-writers/&quot;&gt;takes time&lt;/a&gt;. It’s natural to write a “sloppy copy” off the bat, then improve the quality over &lt;a href=&quot;http://www.paulgraham.com/writing44.html&quot;&gt;several revisions&lt;/a&gt;. If you feel too busy to blog, at a loss for topics, or worried about your opinion being on the public record, give Steve Yegge’s &lt;a href=&quot;https://sites.google.com/site/steveyegge2/you-should-write-blogs&quot;&gt;&lt;em&gt;You Should Write Blogs&lt;/em&gt;&lt;/a&gt; ten minutes of your time. Even if it doesn’t convince you, I think you’ll enjoy the read.&lt;/p&gt;

&lt;p&gt;Software engineers should write because they might actually &lt;em&gt;enjoy&lt;/em&gt; writing. Many of us are motivated by the potential for our software to have “impact”, to make a difference in people’s lives.&lt;/p&gt;

&lt;p&gt;In the same way, writing is a powerful vehicle for impact. The blog post on management helps a manager invigorate his team with motivation. The tutorial on programming sparks a student’s interest in computer science. The essay on career advice inspires a graduate to pursue a new career path.&lt;/p&gt;

&lt;p&gt;Even if nobody reads your essay, writing it will make an impact on &lt;em&gt;you&lt;/em&gt;. It will clarify your opinion on a topic and strengthen– or even weaken– your beliefs. The process alone of putting jumbled thoughts into concrete words is valuable.&lt;/p&gt;

&lt;p&gt;Writing offers the same sense of impact that motivates an engineer to write software. Combine this with how it promotes skills useful in software engineering and facilitates collaboration, then suddenly writing appears to be a worthwhile activity.&lt;/p&gt;

&lt;p&gt;Even for the “math kids”.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://www.shubhro.com/2014/12/27/software-engineers-should-write/</link>
        <guid isPermaLink="true">http://www.shubhro.com/2014/12/27/software-engineers-should-write/</guid>
      </item>
    
      <item>
        <title>Reverse-engineering the Kayak app with mitmproxy</title>
        <description>&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/kayak-mitmproxy/kayakapp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.kayak.com/&quot;&gt;Kayak&lt;/a&gt;– the popular fare comparison web site– recently &lt;a href=&quot;https://www.kayak.com/labs/api/search/&quot;&gt;discontinued&lt;/a&gt; their API service. To the dismay of travel hackers, fare comparison APIs frequently &lt;a href=&quot;http://stackoverflow.com/questions/10680408/is-there-any-api-for-getting-flight-fare&quot;&gt;come and go&lt;/a&gt;. But that doesn’t mean we can’t hack together our own Kayak API.&lt;/p&gt;

&lt;p&gt;Web scraping is the most common way to imitiate an API, but it’s vulnerable to small changes in the UI. On the other hand, &lt;em&gt;mobile&lt;/em&gt; is an area where UI changes are often independent of the supporting server API. Developers often change the “look and feel” of the mobile app, but seldom swap out the server &lt;em&gt;endpoints&lt;/em&gt; from which data are obtained. For this reason, reverse-engineering mobile applications is a good way to expose APIs that we can exploit.&lt;/p&gt;

&lt;p&gt;In this post, I’ll explain how I used &lt;a href=&quot;http://mitmproxy.org/&quot;&gt;mitmproxy&lt;/a&gt;– a popular network analysis tool– to reverse-engineer the Kayak mobile app. The result is an understanding of important server endpoints that can be accessed programmatically for personal use.&lt;/p&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;p&gt;My tool of choice for reverse-engineering mobile apps is mitmproxy because it presents network activity in a clean, hackable interface. I used Wireshark for a long time, but I actually couldn’t get the TLS decryption working and the X-Window interface was a little clunky. Mitmproxy functions as a proxy between the mobile device and the rest of the Internet. Any traffic targeting the phone must travel through mitmproxy, allowing us to analyze it.&lt;/p&gt;

&lt;p&gt;Getting started with mitmproxy is straightforward:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install mitmproxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run &lt;code&gt;mitmproxy&lt;/code&gt; to generate certificate files in &lt;code&gt;~/.mitmproxy&lt;/code&gt;. From that folder, get the &lt;code&gt;mitmproxy-ca-cert.pem&lt;/code&gt; file onto your mobile device by emailing it to yourself, for example. Then follow certificate installation steps for &lt;a href=&quot;http://mitmproxy.org/doc/certinstall/ios.html&quot;&gt;iOS&lt;/a&gt; or &lt;a href=&quot;http://mitmproxy.org/doc/certinstall/android.html&quot;&gt;Android&lt;/a&gt;. Because I used the Kayak iPhone app, I’ll continue this tutorial with iOS.&lt;/p&gt;

&lt;p&gt;Mobile apps often encrypt traffic to protect data integrity and confidentiality. Transport Layer Security (TLS) is a popular protocol for implementing this encryption. By installing the certificate on a mobile device, we’re enabling mitmproxy to decrypt its TLS traffic, which includes HTTPS requests and responses. &lt;/p&gt;

&lt;p&gt;We need to configure the mobile device to use our computer’s IP address as the proxy. On a Mac, we can find the IP address my opening up System Preferences &amp;gt; Network:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/kayak-mitmproxy/ipaddress.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I configured my iPhone to use my Mac as the proxy by tapping Settings &amp;gt; Wi-Fi &amp;gt; [Network Name], and set HTTP PROXY to ‘Manual’. Then I set the computer’s IP address as the server and 8080 as the port.&lt;/p&gt;

&lt;h3 id=&quot;recording-kayak-network-activity&quot;&gt;Recording Kayak network activity&lt;/h3&gt;

&lt;p&gt;We’re now able to observe and save all of the iPhone’s network activity, including those occuring over HTTPS. Let’s record activity for the Kayak iPhone app by running &lt;code&gt;mitmdump -w kayak_flows.out&lt;/code&gt; and tapping through the Kayak app as usual. In particular, navigate to Flights &amp;gt; From &amp;gt; Current location &amp;gt; Find Flights. After getting to the search results page, close the Kayak app and exit mitmdump by pressing &lt;code&gt;ctrl+c&lt;/code&gt;. We know that, during this usage, the Kayak app must have communicated with the server to learn airports and prices.&lt;/p&gt;

&lt;h3 id=&quot;browsing-saved-network-activity&quot;&gt;Browsing saved network activity&lt;/h3&gt;

&lt;p&gt;Having saved the network activity to a file, we can browse the results in a beautiful &lt;a href=&quot;http://en.wikipedia.org/wiki/Curses_%28programming_library%29&quot;&gt;curses&lt;/a&gt; interface with &lt;code&gt;mitmproxy -r kayak_flows.out&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/kayak-mitmproxy/mitmproxybasic.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we flip through the requests with the arrow keys, the first to jump out is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET https://www.kayak.com/k/authajax/?action=registermobile&amp;amp;uuid=[UNIQUE IDENTIFIER]&amp;amp;hash=[A HASH]&amp;amp;model=iPhone4,1&amp;amp;appid=kayakfree&amp;amp;os=8.1.1&amp;amp;msgApiVersion=1&amp;amp;as=0&amp;amp;appdist=adhoc&amp;amp;prefix=`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hit &amp;lt;Enter&amp;gt; then &amp;lt;Tab&amp;gt; to view the server response. We discover fields for &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;uid&lt;/code&gt;, &lt;code&gt;token&lt;/code&gt;, &lt;code&gt;sid&lt;/code&gt;, and &lt;code&gt;bogus&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Great! Let’s make a note of the &lt;code&gt;uid&lt;/code&gt;, &lt;code&gt;token&lt;/code&gt;, and &lt;code&gt;sid&lt;/code&gt; fields because they might be used in later requests. Back in the request list, we continue to look for interesting URLs. Here’s one: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET https://www.kayak.com/api/search/V8/flight/start?cabin=e&amp;amp;travelers=1&amp;amp;origin1=BDL&amp;amp;nearbyO1=false&amp;amp;destination1=LAX&amp;amp;nearbyD1=false&amp;amp;depart_date1=12/18/2014&amp;amp;depart_time1=a&amp;amp;depart_date_flex1=exact&amp;amp;_sid_=[SID VALUE]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/static/kayak-mitmproxy/mitmproxyresponse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This request generates a &lt;code&gt;searchid&lt;/code&gt; that will probably be used shortly to uniquely identify our choice of airports, dates, and other preferences.&lt;/p&gt;

&lt;p&gt;Indeed, that’s the case! Our attention is drawn to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET https://www.kayak.com/api/search/V8/flight/poll?currency=USD&amp;amp;searchid=[SEARCH ID]&amp;amp;c=2000&amp;amp;providerData=true&amp;amp;nc=40&amp;amp;includeopaques=true&amp;amp;showAirlineLogos=true&amp;amp;_sid_=[SID VALUE]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This request includes our &lt;code&gt;searchid&lt;/code&gt; and &lt;code&gt;sid&lt;/code&gt; from earlier, and the response is a large JSON object that includes airline names, prices, contact, booking URLs, and more. This is exactly the data we’re looking for.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/kayak-mitmproxy/mitmproxyprices.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h3&gt;

&lt;p&gt;Let’s put these observations together to discern a basic API:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Think of the &lt;code&gt;uuid=[UNIQUE IDENTIFIER]&amp;amp;hash=[A HASH]&lt;/code&gt; fields to be like an API key and secret generated when running the mobile app.&lt;/li&gt;
  &lt;li&gt;Generate an &lt;code&gt;sid&lt;/code&gt; at: &lt;code&gt;https://www.kayak.com/k/authajax/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Generate a &lt;code&gt;searchid&lt;/code&gt; at: &lt;code&gt;https://www.kayak.com/api/search/V8/flight/start&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Retrieve prices at: &lt;code&gt;https://www.kayak.com/api/search/V8/flight/poll&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out a complete basic client on &lt;a href=&quot;https://github.com/shbhrsaha/kayak-mobile-client&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The results presented here are far from a complete API, but I hope this tutorial demonstrates the power of reverse-engineering mobile apps. Tools like mitmproxy helps us obtain a level of understanding previously prohibited by the locked-down nature of mobile operating systems. Given how young the mobile space is, there’s never been a better time to do some exploring.&lt;/p&gt;

&lt;p&gt;To read more about researching mobile apps with proxies, check out &lt;a href=&quot;http://jeffhuang.com/extracting_my_data_from_the_microsoft_band.html&quot;&gt;Extracting My Data from the Microsoft Band&lt;/a&gt;, &lt;a href=&quot;http://silverskylabs.github.io/yakhak/&quot;&gt;Yik Hak&lt;/a&gt;, and &lt;a href=&quot;http://blogs.wsj.com/wtk-mobile/&quot;&gt;What They Know Mobile&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://www.shubhro.com/2014/12/18/reverse-engineering-kayak-mitmproxy/</link>
        <guid isPermaLink="true">http://www.shubhro.com/2014/12/18/reverse-engineering-kayak-mitmproxy/</guid>
      </item>
    
      <item>
        <title>Lessons from teaching a hack class</title>
        <description>&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/lessons-intro-to-hacking/teaching.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;As a college student, I spend most of my (sleep-deprived) days attending class. Rarely do I get the opportunity I had last Spring: to actually &lt;em&gt;teach&lt;/em&gt; a class with one of my best friends, &lt;a href=&quot;http://www.princeton.edu/~crmarsh/&quot;&gt;Charlie Marsh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before you get any ideas about my joining the faculty, I should provide some context. The class, titled &lt;a href=&quot;http://introtohacking.github.io/&quot;&gt;‘Introduction to Hacking’&lt;/a&gt;, was one of several student-run “hack classes” offered by the &lt;a href=&quot;http://www.princetoneclub.com/&quot;&gt;Princeton Entrepreneurship Club&lt;/a&gt;. We taught fellow students how to solve practical problems with programming, covering topics like data analysis with Python, web scraping, machine learning, and more. At a high level, we simply wanted to expose students to topics in programming that are typically absent from a course catalog. Around 20-30 students consistently attended the 7-week class, a good turnout given that the course was not offered for credit and wouldn’t be listed on any résumés.&lt;/p&gt;

&lt;p&gt;In this post, I share some of the lessons we learned along the way. I hope this information helps future hack class instructors– and teachers anywhere– make the most of their classes.&lt;/p&gt;

&lt;h3 id=&quot;hack-classes-work&quot;&gt;1. Hack classes work&lt;/h3&gt;

&lt;p&gt;I’m enthusiastic about hack classes. They &lt;em&gt;share interesting topics&lt;/em&gt; in a &lt;em&gt;flexible format&lt;/em&gt; with &lt;em&gt;genuinely passionate students&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Each hack class is motivated by an interesting topic– one that the university does not address, is difficult to learn alone, or both. When Stanford University began to offer an &lt;a href=&quot;http://cs193p.stanford.edu/&quot;&gt;iOS programming class&lt;/a&gt;, the iOS hack class brought the same content to a physical classroom at Princeton. Unlike the iOS hack class, &lt;em&gt;Introduction to Hacking&lt;/em&gt; was not motivated by a single topic, but rather a grab-bag of topics with technical buzz (“machine learning!”) or usefulness across many different career paths. In both classes, the hack class shared interesting knowledge that was not available in the university curriculum.&lt;/p&gt;

&lt;p&gt;Flexibility is a key strength of hack classes. As an instructor, I can create a class or adjust the syllabus without the bureaucracy of a registrar. Students benefit from the freedom to attend whichever lectures they wish. Historically, student retention was a problem in hack classes where material was cumulative from week-to-week. Even if students missed just one lecture, they’d be unable to follow along when future material built on the previous weeks’. To reverse this trend, we designed the lectures in &lt;em&gt;Introduction to Hacking&lt;/em&gt; to be modular– each session stood by itself and did not require students to attend previous lectures. This afforded students the flexibility to attend only the sessions they found interesting.&lt;/p&gt;

&lt;p&gt;By their “optional” nature, hack classes attract only genuinely passionate students. This is an amazing benefit because a lecture hall of passionate students leads to rich discussions, which leads to better learning for everyone. Instructors also have an additional incentive to teach well. If Charlie and I didn’t make the material engaging, students would’ve simply stopped coming. When things are going poorly, this realization can be disheartening. But when things are going well, it’s enriching and motivating for students and instructors alike.&lt;/p&gt;

&lt;p&gt;Hack classes aren’t perfect, but I believe they effectively fill a gap in the university curriculum. They’re flexible initiatives that invite students to teach interesting material to other passionate students. And they work.&lt;/p&gt;

&lt;h3 id=&quot;students-take-hack-classes-for-different-reasons&quot;&gt;2. Students take hack classes for different reasons&lt;/h3&gt;

&lt;p&gt;Charlie and I ask the ‘why’ question often. Before even deciding to teach &lt;em&gt;Introduction to Hacking&lt;/em&gt;, we thought about why exactly we were going to do it. (More on this at the end.)&lt;/p&gt;

&lt;p&gt;We realized that students too– often subconsciously– think about why they should participate in a hack class. Reasons vary from “I want to learn the material” to “the instructors are my friends”. As instructors, we tried to tease out these reasons early with a short survey.&lt;/p&gt;

&lt;p&gt;To our surprise, we received over 50 responses! Either students were passionate about communicating their motivations or they loved taking surveys. Responses varied widely, but the two key takeaways were that: (1) students had diverse levels of experience, and (2) some students wanted to learn just one or two of the topics on the syllabus. We structured the course with these two considerations in mind.&lt;/p&gt;

&lt;p&gt;Most students had taken two or three programming courses (COS 126/217/226), but some were beginners and others, experts. Because of the diverse levels of experience, we emphasized “survey over deep dive”. We used lecture to introduce “what’s out there”, and concluded with three slides listing next-steps for novice, intermediate, and advanced programmers. For example, in the data analysis lecture, we suggested that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Novice students&lt;/strong&gt; set up their development environment and learn Python on Codecademy&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Intermediate students&lt;/strong&gt; explore iPython Notebook &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Advanced students&lt;/strong&gt; analyze large datasets and check out D3.js, NodeBox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conveniently, the nature of the topics in &lt;em&gt;Introduction to Hacking&lt;/em&gt; made the class’s survey nature easy to implement. Many advanced programmers just hadn’t gotten around to checking out some of the topics like web scraping, and novices didn’t require special knowledge to understand how the tools and libraries were used. By explicitly communicating the survey nature of the course, we maintained focus while accommodating the students’ diverse levels of experience.&lt;/p&gt;

&lt;p&gt;It’s perfectly fine for some students to attend one or two sessions. As I mentioned, we designed each lecture to stand on its own. In addition, we distributed lecture slides and example code in advance of the session day as often as possible. This enabled students to attend the lectures that mattered most to them. It also gave us feedback on which topics sounded interesting to students. “Git, Bash Tricks” was our least-attended, while “Computer Security: Passwords, Web, Wireshark” our most-attended.&lt;/p&gt;

&lt;p&gt;Understanding students’ motivations helped us to structure the class most effectively.&lt;/p&gt;

&lt;h3 id=&quot;teaching-is-hard&quot;&gt;3. Teaching is hard&lt;/h3&gt;

&lt;p&gt;Coming out of the class, Charlie and I have a greater appreciation for our teachers. Teaching is challenging for a number of reasons.&lt;/p&gt;

&lt;p&gt;Teaching requires significant empathy for students. While we were comfortable with the content, we had to take a step back to identify how a beginner might understand the topic. Adequate preparation was key to answering this question effectively. One instance of this was in the security lecture, where I wanted to introduce packet sniffing tools to students who’d never heard of a network “packet”. I had to clear my mind of anything I knew about networks to realize all that mattered was an awareness for “hosts”, “routers”, and “packets” flowing between them. The result was a &lt;a href=&quot;https://www.dropbox.com/s/9rqa913ewc6luek/7_Computer_Security.pdf&quot;&gt;single slide&lt;/a&gt; demonstrating their relationship. Striving for simplicity over complexity, I realized: choosing what &lt;em&gt;not&lt;/em&gt; to include was just as important as what to include.&lt;/p&gt;

&lt;p&gt;Teaching requires significant preparation time. Each week, Charlie and I spent 3-5 hours writing the lecture slides. We then met for an hour to provide each other feedback and divvy up the task of writing the live demo, which usually required another 1-2 hours.&lt;/p&gt;

&lt;p&gt;As much as teaching demands empathy and time, it is also incredibly rewarding. A well-prepared lecture feels like it just falls into place, and the joy of students’ understanding makes it worthwhile.&lt;/p&gt;

&lt;h3 id=&quot;communication-is-crucial&quot;&gt;4. Communication is crucial&lt;/h3&gt;

&lt;p&gt;The quality of communication can make or break a hack class. Communication spans messaging, questions, and feedback.&lt;/p&gt;

&lt;p&gt;Messaging promotes awareness for the class and maintains student interest from week-to-week. To our amazement, &lt;em&gt;Introduction to Hacking&lt;/em&gt; attracted over 200 students to its signup list. I think some of this success can be attributed to “grassroots” methods– months in advance, we started adding individual friends to the list of participating students. During the class, we emailed the “what” and “why” of each lecture a few days in advance. Towards the end, we also promoted individual lecture topics to mass email lists around the school. That way, students who hadn’t signed up for the course attended a lecture just because they were interested in the topic. It’s amazing that a lot of people came to just the &lt;em&gt;final&lt;/em&gt; lecture and got a lot out of it.&lt;/p&gt;

&lt;p&gt;In the lectures themselves, we promoted communication by constantly encouraging questions. A trick I learned is to ask “What questions do you have?” instead of “Do you have any questions?”. Doing this communicates that questions are &lt;em&gt;expected&lt;/em&gt; and are not a barrier to the class’s progress. We tried a “Hack Hour” following the lecture with an online form submission for questions, but this method quickly fell apart. We realized that the informal, one-on-one Q&amp;amp;As that naturally arise after lecture were more effective. (The majority of the help provided during that time was for development environment setup.)&lt;/p&gt;

&lt;p&gt;Charlie and I were eager to hear feedback. Students preferred writing their feedback to saying it in-person. To facilitate that communication, we created an anonymous online form for anyone to send feedback just by clicking a link on the web site. While we received around five responses from that form over that the semester, the majority of feedback came by email from friends.&lt;/p&gt;

&lt;h3 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h3&gt;

&lt;p&gt;A few months after &lt;em&gt;Introduction to Hacking&lt;/em&gt; ran, I was chatting with a friend who had taken the course. A politics major, he was actually now studying for a software engineering interview. I was surprised. He explained that, over the past year, he realized software engineering was his true calling, and &lt;em&gt;Introduction to Hacking&lt;/em&gt; was an influential reason for that change.&lt;/p&gt;

&lt;p&gt;Across our projects, Charlie and I are most motivated by the potential for &lt;em&gt;impact&lt;/em&gt;. It’s our answer to the ‘why’ question I mentioned earlier: we want our work to matter. My politics friend is just one instance of how hack classes are an incredible vehicle for impact. I believe that, in many cases, students learn more effectively when they’re taught by other students. And I’m grateful for the opportunity to have been a part of that.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://www.shubhro.com/2014/12/06/lessons-hack-class/</link>
        <guid isPermaLink="true">http://www.shubhro.com/2014/12/06/lessons-hack-class/</guid>
      </item>
    
      <item>
        <title>Language for giving and receiving effective feedback</title>
        <description>&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/language-for-feedback/feedbackwave.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We can all remember to “ask for feedback” and “end on a positive note”, but most of us are at a loss for how to translate broad advice into specific, thoughtful words.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Feedback is a crucial element of learning. Yet, just the word “feedback” is enough to trigger anxiety in many people.&lt;/p&gt;

&lt;p&gt;For most of my life, I too was anxious about both giving and receiving feedback. On the giving side, I was afraid of being too critical and demotivating the recipient. On the receiving side, I was afraid of being vulnerable or the focus of the feedback giver’s attention.&lt;/p&gt;

&lt;p&gt;Most guidance on how to give and receive feedback centers around “things to do and things not to do”. While crucial points are highlighted, I think the existing guidance muddles the key to reducing feedback anxiety: &lt;em&gt;language&lt;/em&gt;. We can all remember to “ask for feedback” and “end on a positive note”, but most of us are at a loss for how to translate broad advice into specific, thoughtful words.&lt;/p&gt;

&lt;p&gt;In this post, I want to run through some specific phrasings that can be helpful when giving and receiving feedback. As a toy example, I’ll use feedback on &lt;a href=&quot;http://en.wikipedia.org/wiki/Squat_%28exercise%29&quot;&gt;squats&lt;/a&gt; to frame the discussion. (For those unfamiliar with the squat: it’s a popular exercise that requires careful attention to form for both beginners and advanced weightlifters. Because squat form is difficult to improve without external feedback, the exercise is representative of many types of feedback discussions.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/language-for-feedback/squatguy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ll start by introducing TACOISL, a framework for giving feedback. Then, 
I’ll conclude with some tips for receiving feedback.&lt;/p&gt;

&lt;h3 id=&quot;tacoisl&quot;&gt;TACOISL&lt;/h3&gt;

&lt;p&gt;Let’s imagine that a friend just finished performing a squat in the gym, and we notice an opportunity to provide feedback. I propose the TACOISL model for organizing your next steps:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;T&lt;/strong&gt; hink
&lt;br /&gt; &lt;strong&gt;A&lt;/strong&gt; sk
&lt;br /&gt; &lt;strong&gt;C&lt;/strong&gt; ommunicate:
&lt;br /&gt;       &lt;strong&gt;O&lt;/strong&gt; bservations
&lt;br /&gt;       &lt;strong&gt;I&lt;/strong&gt; mpact
&lt;br /&gt;       &lt;strong&gt;S&lt;/strong&gt; uggestions
&lt;br /&gt; &lt;strong&gt;L&lt;/strong&gt; isten&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I made up this (admittedly meaningless) acronym because I didn’t find existing models very actionable. Most famous among these: &lt;a href=&quot;http://thebraincraftcompany.com/giving-feedback-the-b-o-o-s-t-model/&quot;&gt;BOOST&lt;/a&gt; (Balanced, Observed, Objective, Specific, Timely), &lt;a href=&quot;http://www.ryerson.ca/hr/yourHR/oee/effective_feedback.html&quot;&gt;STAR&lt;/a&gt; (Situation, Task, Action, Result), and &lt;a href=&quot;http://dougbelshaw.com/blog/2009/07/21/how-to-spin-your-way-to-giving-more-constructive-negative-feedback/&quot;&gt;SPIN&lt;/a&gt; (Situation Specifics, Personal Impact, Insight &amp;amp; Interpretation, Next Steps). Don’t get me wrong– they’re all thoughtful and worth reading. I just put up with a less clever acronym to capture a more &lt;em&gt;actionable&lt;/em&gt; way to remember things.&lt;/p&gt;

&lt;h3 id=&quot;think&quot;&gt;Think&lt;/h3&gt;

&lt;p&gt;Before saying anything, think for a moment about what you want to communicate. You want to figure out what you saw (observations), why it matters (impact), and how it can be improved (suggestions). We’ll dive into the language for communicating these thoughts in a minute, but first we want to have it organized in our heads.&lt;/p&gt;

&lt;p&gt;Our friend doing the squat generally did a solid job. We observe that his back was curved slightly inward, but his knees buckled in on the way up. The consequences are that his back is probably feeling good, but his knees might suffer down the road if that element of his form is not fixed. Our suggestion will be that he focus on keeping his knees pointed out throughout the entire squat, while also squatting a lighter weight.
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/static/language-for-feedback/feedbacksandwich.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how I didn’t really create a target number of “positive” and “negative” observations. A popular technique for reducing feedback anxiety is to create a “feedback sandwich”, in which critical feedback is couched between two compliments. I don’t advocate this approach because it often distorts the recipient’s sense of how things are going. Later, we’ll show how the inclusion of suggestions for improvement and specific phrases reduces feedback anxiety without requiring that we artificially couch our messages. At this stage, it is simply important to be genuine in what we choose to communicate.&lt;/p&gt;

&lt;p&gt;That said, don’t focus all of your thought on where things could’ve gone better. It is important to also communicate what went well in our feedback so that the recipient knows what &lt;em&gt;not&lt;/em&gt; to change or even enhance.&lt;/p&gt;

&lt;h3 id=&quot;ask&quot;&gt;Ask&lt;/h3&gt;

&lt;p&gt;Now we start the conversation by &lt;em&gt;asking&lt;/em&gt; the recipient if they want to receive feedback. It’s important to ask because the recipient might not want it (for reasons we cannot control) or simply doesn’t have the time right now (in which case they’ll postpone). Good feedback conversations require at least a few minutes of one-on-one time.&lt;/p&gt;

&lt;p&gt;The language we use to “ask” is important because it frames the rest of the discussion. We want to minimize anxiety while also taking some time out to communicate honestly in a safe environment. The appropriate language can vary, but because we’re usually on a friendly basis with the recipient, we can be more or less casual about it. In the case of our squatting friend, we can ask him one of the following after he catches his breath: &lt;/p&gt;

&lt;p&gt;“Hey, are you interested in some feedback?” &lt;br /&gt;
“Are you looking for pointers on your squats?” &lt;br /&gt;
“Do you want some quick suggestions to improve?” &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;These may seem like simple questions. But notice how they emphasize asking about the recipient’s willingness to receive feedback. It creates a safer environment than saying “Hey, I have some feedback to share” or “I had some thoughts about your squats”. The recipient should say “yes” because they want to improve, not because they feel obligated to hear our opinion. If they say “no” or postpone, that’s totally fine!&lt;/p&gt;

&lt;p&gt;Also, consider using “pointers” or “suggestions” instead of the word “feedback” to reduce the recipient’s anxiety. Many people respond warmly to these alternatives, whereas “feedback” makes them anxious.&lt;/p&gt;

&lt;h3 id=&quot;communicate-observations&quot;&gt;Communicate Observations&lt;/h3&gt;

&lt;p&gt;Good feedback begins with observations. These points can be complimentary or critical, but it’s crucial that we refrain from drawing inferences about &lt;em&gt;why&lt;/em&gt; they happened. We can speak only from where we stand, so we have to be careful not to jump to conclusions about the recipient’s perspective. Let’s return to the squat example. The observations we communicate are: &lt;/p&gt;

&lt;p&gt;“Your back looked great on the way down– really straight, with a slight arch inwards. On the way up, I think your knees buckled in a little bit.”&lt;/p&gt;

&lt;p&gt;Notice the dedication to facts over inferences. It would be less effective to say “Your knees buckled because you probably couldn’t handle this amount of weight.” Even though the knees most likely buckled because of the weight, saying it &lt;em&gt;at this stage&lt;/em&gt; doesn’t really advance the feedback conversation. In addition, we use language like “looked” and “I think” to emphasize that we’re just one perspective for the recipient to consider.&lt;/p&gt;

&lt;p&gt;The observations suggested above mentioned what went well (straight back, slight arch). It’s good to do this to reinforce the recipients’ confidence in what they’re doing right. On the off-chance they did it by accident, at least now they’re aware it’s a good thing!&lt;/p&gt;

&lt;p&gt;As I mentioned earlier in the &lt;em&gt;Think&lt;/em&gt; section, the most important consideration here is that we’re honest and straightforward. If you do end up presenting the observations in “feedback sandwich” order, there are some things you can do to maximize the chances your words come across as genuine. First, refrain from using “but” to segue from the complimentary to the critical feedback. The word is almost like a harbinger of demotivating sentences. Instead, use “and” or simply continue communicating observations, as in the squatting example above. Second, try “physically” counting off your observations on your fingers. Somehow in my personal experience I find that people respond warmly to this because it indicates that the observations were genuinely thoughtful, and that the compliments weren’t just drawn off-the-cuff to couch the critical feedback.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/language-for-feedback/countingpoints.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;communicate-impact&quot;&gt;Communicate Impact&lt;/h3&gt;

&lt;p&gt;Oftentimes overlooked, discussing impact is a useful way to make your suggestions persuasive and more likely to be adopted by the recipient. The goal here is to explain the consequences of the observations we made in the previous section. To our squatting friend we might say:&lt;/p&gt;

&lt;p&gt;“I used to do that a lot when getting started. Then, Lindsay told me that buckling the knees creates instability and can also lead to knee problems down the road.”&lt;/p&gt;

&lt;p&gt;With regards to language, these few sentences are effective for a number of reasons. First, we empathize with the recipient by revealing that we used to have the same problem. Because we opened up and made ourselves vulnerable, the recipient feels less anxious because he realizes that he’s not alone. Second, the knowledge about impact is communicated along with &lt;em&gt;how&lt;/em&gt; that knowledge was acquired (learned from Lindsay). Doing so sets the tone that both the feedback giver and recipient are just two people who are constantly learning and improving.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Impact&lt;/em&gt; section is also where you should mention impact on &lt;em&gt;other people&lt;/em&gt;, if relevant. It’s not so relevant with squatting, but imagine an example where a colleague speaks out too frequently at meetings. The impact there is that other team members don’t have an opportunity to communicate their opinion. You might also mention your own perspective, if relevant, with phrases like:&lt;/p&gt;

&lt;p&gt;“I’m worried that this will lead you to…” &lt;br /&gt;
“From my perspective what will happen is…” &lt;br /&gt;
“I think there’s a chance that…” &lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;communicate-suggestions&quot;&gt;Communicate Suggestions&lt;/h3&gt;

&lt;p&gt;Finally, we want to end by communicating suggestions for how to improve on the critical observations made previously. To our squatting friend, we might say:&lt;/p&gt;

&lt;p&gt;“Why don’t you try squatting a lighter weight until your knees don’t need to buckle on the way up? I also find that focusing on one element of form at a time helps me to gradually improve my squat.”&lt;/p&gt;

&lt;p&gt;In communicating our suggestions, we prefer to make &lt;em&gt;suggestions&lt;/em&gt; over &lt;em&gt;commands&lt;/em&gt;. Whether the suggestions are acted on is completely up to the recipient, and we shouldn’t be offended if they aren’t. A good language technique to use here is to phrase the suggestion as a question:&lt;/p&gt;

&lt;p&gt;“Why don’t you try…?” &lt;br /&gt;
“Have you considered…?” &lt;br /&gt;
“What do you think about…?” &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;It’s important for the suggestions to also be actionable. They should be specific enough that the course of future action is clear.&lt;/p&gt;

&lt;p&gt;Closing our remarks with suggestions is a more effective alternative to the “feedback sandwich”. We don’t have to make a compliment to end the comments on a positive, forward-looking note. Suggestions also serve to help open up a conversation.&lt;/p&gt;

&lt;h3 id=&quot;listen&quot;&gt;Listen&lt;/h3&gt;

&lt;p&gt;After communicating our part, it’s crucial that we now listen to the recipient. Perhaps we misunderstood their perspective, or maybe they would like to hear more feedback. To open the discussion we might ask: “What are your thoughts?”, “How do you see things?”, or “How do you feel about it?”&lt;/p&gt;

&lt;h3 id=&quot;receiving-feedback&quot;&gt;Receiving Feedback&lt;/h3&gt;

&lt;p&gt;Fortunately, the language on the receiving end is not as complex, but it is certainly worth examining.&lt;/p&gt;

&lt;p&gt;It starts by making others aware that we’re open and looking for feedback. Before the squat, my friend might say:&lt;/p&gt;

&lt;p&gt;“Hey, would you mind checking out my squat form? I’m always looking for ways to improve.”&lt;/p&gt;

&lt;p&gt;It’s as simple as that. If an opportunity to ask does not arise before the event, the recipient can open by saying: “What can I do to make it better?” or “How can I improve?” The &lt;em&gt;crucial&lt;/em&gt; thing to remember here is that we open the discussion effectively. Simply asking “Do you have any feedback?” or “How did I do?” tends to result in “No” or “Great!” as responses. Making the question more specific with the language described above facilitates richer conversations.&lt;/p&gt;

&lt;p&gt;After listening to the giver’s opinion, it’s important to thank them for their feedback:&lt;/p&gt;

&lt;p&gt;“Thanks for sharing your feedback, by the way. I really appreciate your thoughts.”&lt;/p&gt;

&lt;p&gt;Not only does the giver feel good, but also we communicate openness to receiving feedback in the future.&lt;/p&gt;

&lt;h3 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h3&gt;

&lt;p&gt;Giving and receiving feedback is never easy. But good language can help us to communicate feedback in a genuine, effective way. I’ll caveat my post by saying that I’m not a psychologist or MBA professor; the above comments are simply from my personal experiences. As with all suggestions, you should adjust the suggested language to fit your style and the situation. For what it’s worth, I hope this guidance makes feedback conversations just a little easier.&lt;/p&gt;

&lt;h3 id=&quot;recommended-readings&quot;&gt;Recommended Readings&lt;/h3&gt;

&lt;p&gt;If you liked this post, I suggest checking out the following books:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Crucial-Conversations-Talking-Stakes-Second-ebook/dp/B005K0AYH4/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1417041972&amp;amp;sr=1-1&quot;&gt;Crucial Conversations by Kerry Patterson, et al.&lt;/a&gt; - A great guide on how to handle those important conversations in which the stakes are high and good language matters&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Daring-Greatly-Courage-Vulnerable-Transforms/dp/1592407331&quot;&gt;Daring Greatly by Brene Brown&lt;/a&gt; - As someone who’s struggled with opening up myself, I recommend this book for anyone interested in the strength of vulnerability as a personality trait&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to Sneha Saha for reviewing an earlier draft of this post and drawing the “feedback sandwich”.&lt;/p&gt;

</description>
        <pubDate>Fri, 28 Nov 2014 00:00:00 -0500</pubDate>
        <link>http://www.shubhro.com/2014/11/28/language-for-feedback/</link>
        <guid isPermaLink="true">http://www.shubhro.com/2014/11/28/language-for-feedback/</guid>
      </item>
    
  </channel>
</rss>
